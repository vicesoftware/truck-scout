version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: tms_test_db
      POSTGRES_USER: tms_test_user
      POSTGRES_PASSWORD: test_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tms_test_user -d tms_test_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  nextjs:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://tms_test_user:test_password@postgres:5432/tms_test_db
      NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

  test-setup:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      API_URL: http://nextjs:3000
      DATABASE_URL: postgresql://tms_test_user:test_password@postgres:5432/tms_test_db
    volumes:
      - .:/app
    depends_on:
      nextjs:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for API to be ready...' &&
        wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 -O /dev/null http://nextjs:3000/api/health &&
        echo 'API is ready!' &&
        npm install
      "

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      API_URL: http://nextjs:3000
      DATABASE_URL: postgresql://tms_test_user:test_password@postgres:5432/tms_test_db
      TEST_MODE: ${TEST_MODE:-watch}
    volumes:
      - .:/app
    depends_on:
      test-setup:
        condition: service_completed_successfully
    command: >
      sh -c "
        if [ "$${TEST_MODE}" = "watch" ]; then
          npm run test:integration:watch
        else
          npm run test:integration
        fi
      "
    tty: true
    stdin_open: true

volumes:
  postgres_data: